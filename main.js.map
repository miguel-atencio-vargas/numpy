{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/app/components/dashboard/dashboard.component.html","webpack:///./src/app/components/dashboard/dashboard.component.ts","webpack:///./src/app/components/excel/excel.component.html","webpack:///./src/app/components/excel/excel.component.ts","webpack:///./src/app/components/export/export.component.html","webpack:///./src/app/components/export/export.component.ts","webpack:///./src/app/components/input-visual/input-visual.component.html","webpack:///./src/app/components/input-visual/input-visual.component.ts","webpack:///./src/app/components/resultado/resultado.component.css","webpack:///./src/app/components/resultado/resultado.component.html","webpack:///./src/app/components/resultado/resultado.component.ts","webpack:///./src/app/components/unimatriz/unimatriz.component.css","webpack:///./src/app/components/unimatriz/unimatriz.component.html","webpack:///./src/app/components/unimatriz/unimatriz.component.ts","webpack:///./src/app/services/global.ts","webpack:///./src/app/services/operaciones.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts","webpack:///fs (ignored)","webpack:///crypto (ignored)","webpack:///stream (ignored)"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"navigation col-lg-12\\\">\\n    <nav class=\\\"navbar navbar-expand-lg navbar-dark bg-dark \\\">\\n        <a class=\\\"navbar-brand\\\" [routerLink]=\\\"['/']\\\">ÁLGEBRA LINEAL</a>\\n        <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarSupportedContent\\\" aria-controls=\\\"navbarSupportedContent\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\"><span class=\\\"navbar-toggler-icon\\\"></span></button>\\n\\n        <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarSupportedContent\\\">\\n            <ul class=\\\"navbar-nav mr-auto\\\">\\n                <li class=\\\"nav-item\\\">\\n                    <a [routerLink]=\\\"['/operaciones']\\\" [routerLinkActive]=\\\"['active']\\\" class=\\\"nav-link\\\">Operaciones con dos matrices</a>\\n                </li>\\n                <li class=\\\"nav-item\\\">\\n                    <a [routerLink]=\\\"['/unimatriz']\\\" [routerLinkActive]=\\\"['active']\\\" class=\\\"nav-link\\\">Operaciones con una matriz</a>\\n                </li>\\n                <li class=\\\"nav-item\\\">\\n                    <a [routerLink]=\\\"['/random']\\\" [routerLinkActive]=\\\"['active']\\\" class=\\\"nav-link\\\">Generar Archivos Excel</a>\\n                </li>\\n            </ul>\\n        </div>\\n    </nav>\\n    <router-outlet></router-outlet>\\n</div>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  title = 'frontend';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {routing, appRoutingProviders} from './app.routing';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { ExcelComponent } from './components/excel/excel.component';\nimport { ResultadoComponent } from './components/resultado/resultado.component';\nimport { UnimatrizComponent } from './components/unimatriz/unimatriz.component';\nimport { InputVisualComponent } from './components/input-visual/input-visual.component';\nimport { CommonModule } from '@angular/common';\nimport { ExportComponent } from './components/export/export.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    ExcelComponent,\n    ResultadoComponent,\n    UnimatrizComponent,\n    InputVisualComponent,\n    ExportComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    routing,\n    ReactiveFormsModule,\n    CommonModule\n  ],\n  providers: [\n    appRoutingProviders\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { ModuleWithProviders } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { ExcelComponent } from './components/excel/excel.component';\nimport { UnimatrizComponent } from './components/unimatriz/unimatriz.component';\nimport { ExportComponent } from './components/export/export.component';\n\nconst appRoutes: Routes = [\n    {path: 'dashboard', component: DashboardComponent},\n    {path: 'operaciones', component: ExcelComponent},\n    {path: 'unimatriz', component: UnimatrizComponent},\n    {path: 'random', component: ExportComponent},\n    {path: '**', component: DashboardComponent}\n];\n\nexport const appRoutingProviders: any[] = [];\nexport const routing: ModuleWithProviders = RouterModule.forRoot(appRoutes);\n\n","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"jumbotron\\\">\\n        <h1 class=\\\"display-4\\\">Bienvenidos a Numpy y Scipy</h1>\\n        <div>\\n            En esta pagina usted puede realizar operaciones con sus archivos de excel. Las operaciones que puede realizar son las siguientes:\\n            <ul>\\n                <li *ngFor=\\\"let i of a\\\">{{i}}</li>\\n            </ul>\\n            <a class=\\\"btn btn-warning\\\" [routerLink]=\\\"['/operaciones']\\\" [routerLinkActive]=\\\"['active']\\\">Operaciones con dos matrices</a>\\n            <hr> Tambien puede obtener informacion de las matrices como:\\n            <ul>\\n                <li *ngFor=\\\"let i of b\\\">{{i}}</li>\\n            </ul>\\n            <a [routerLink]=\\\"['/unimatriz']\\\" [routerLinkActive]=\\\"['active']\\\" class=\\\"btn btn-info\\\">Operaciones con una matriz</a>\\n            <hr> En este apartado puede generar un archivo de excel otorgandoles rangos, con las dimensiones que usted elija y con los siguientes parametros:\\n            <ul>\\n                <li *ngFor=\\\"let i of c\\\">{{i}}</li>\\n            </ul>\\n            <a [routerLink]=\\\"['/random']\\\" [routerLinkActive]=\\\"['active']\\\" class=\\\"btn btn-success\\\">Generar Archivos Excel</a>\\n        </div>\\n\\n    </div>\\n    <p class=\\\"text-muted small text-center\\\">Universidad Loyola de Bolivia - 2019</p>\\n</div>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styles: []\n})\n\n\nexport class DashboardComponent implements OnInit {\n  public a = ['Suma de Matrices', 'Resta de Matrices', 'Multiplicacion vectorial de Matrices', 'Multiplicacion escalar de Matrices'];\n  public b = ['Determinante', 'Rango', 'Norma', 'Traspuesta', 'Diagonal', 'Inversa', 'Triangular Inferior', 'Triangular Superior'];\n  public c = ['Numeros aleatorios enteros', 'Numeros aleatorios con punto decimal', 'Numeros aleatorios según una distribucion de probabilidad'];\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <h2>Suba sus dos archivos excel para efectuar la operacion.</h2>\\n        <h6>\\n            Para realizar las siguientes operaciones por favor verifique que sus matrices sean cuadradas Para el caso de la multiplicacion entre matrices verifique que la cantidad de columnas de A sea igual a la cantidad de filas de B. <br>\\n            <B>\\n            Para la resolucion de ecuaciones lineales solo introduzca los valores de las constantes dejando solamente su notación en matrices.\\n            La respuesta se la dara en una fila por cada incognita.\\n            </B>\\n        </h6>\\n    </div>\\n    <div class=\\\"row\\\">\\n\\n        <form (ngSubmit)=\\\"onSubmit()\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"card\\\">\\n                    <div class=\\\"card-body\\\">\\n                        <h5 class=\\\"card-title\\\">Suba su archivo (A) .xlsx</h5>\\n                        <input class=\\\"btn-success \\\" type=\\\"file\\\" (change)=\\\"onFileChange($event)\\\" multiple=\\\"false\\\" />\\n                    </div>\\n                </div>\\n                <div class=\\\"card\\\">\\n                    <div class=\\\"card-body\\\">\\n                        <h5 class=\\\"card-title\\\">Suba su archivo (B) .xlsx</h5>\\n                        <input class=\\\"btn-success \\\" type=\\\"file\\\" (change)=\\\"onFileChange($event)\\\" multiple=\\\"false\\\" />\\n                    </div>\\n                </div>\\n                <div>\\n                    <input (click)=\\\"operacion('+')\\\" type=\\\"submit\\\" value=\\\"Sumar\\\" class=\\\"btn btn-outline-success miBtn\\\">\\n                    <input (click)=\\\"operacion('-')\\\" type=\\\"submit\\\" value=\\\"Restar\\\" class=\\\"btn btn-outline-info miBtn\\\">\\n                    <input (click)=\\\"operacion('*')\\\" type=\\\"submit\\\" value=\\\"Producto Vectorial\\\" class=\\\"btn btn-outline-danger miBtn\\\">\\n                    <input (click)=\\\"operacion('escalar')\\\" type=\\\"submit\\\" value=\\\"Producto Escalar\\\" class=\\\"btn btn-outline-primary miBtn\\\">\\n                    <hr>\\n                    <input (click)=\\\"operacion('lineal')\\\" type=\\\"submit\\\" value=\\\"Resolver el sistema de ecuaciones de la forma A*X=B\\\" class=\\\"btn btn-warning miBtn\\\">\\n                </div>\\n            </div>\\n        </form>\\n    </div>\\n    <app-resultado class=\\\"col-6\\\" [matriz_resultado]=\\\"resultado\\\" [mensaje]=\\\"mensaje\\\"></app-resultado>\\n\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport * as XLSX from 'xlsx';\nimport { OperacionesService } from '../../services/operaciones.service'\n\n@Component({\n  selector: 'app-excel',\n  templateUrl: './excel.component.html',\n  styles: [],\n  providers: [OperacionesService]\n})\nexport class ExcelComponent implements OnInit {\n  public data: any = {matrix: [], operacion: ''} ;\n  public resultado;\n  public mensaje = '';\n// tslint:disable-next-line: variable-name\n  constructor(private _operacionesService: OperacionesService) { }\n\n  ngOnInit() {}\n\n  onSubmit() {\n    this._operacionesService.operaciones(this.data).subscribe(\n      response => {\n        this.mensaje = response.mensaje;\n        response = JSON.parse(response.resultado);\n        this.resultado = response.data;\n      }\n    );\n  }\n  operacion(value) {\n    this.data.operacion = value;\n  }\n  onFileChange(evt: any) {\n    /* wire up file reader */\n    const target: DataTransfer = (evt.target) as DataTransfer;\n    if (target.files.length !== 1) { throw new Error('NO se pueden subir multiples archivos'); }\n    const reader: FileReader = new FileReader();\n    reader.onload = (e: any) => {\n      /* read workbook */\n      const bstr: string = e.target.result;\n      const wb: XLSX.WorkBook = XLSX.read(bstr, {type: 'binary'});\n      /* grab first sheet */\n      const wsname: string = wb.SheetNames[0];\n      const ws: XLSX.WorkSheet = wb.Sheets[wsname];\n      /* save data */\n      const excelVector = XLSX.utils.sheet_to_json(ws, {header: 1});\n      this.data.matrix.push(excelVector);\n      /* empaquetamos el vector para enviarlo al backend */\n    };\n    reader.readAsBinaryString(target.files[0]);\n  }\n}\n","module.exports = \"<div class=\\\"container\\\">\\n\\n    <div class=\\\"row\\\">\\n        <form (ngSubmit)=\\\"onSubmit()\\\">\\n            <h2>Introduzca los siguientes valores para generar un archivo excel</h2>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-6\\\">\\n                    <span>Seleccione un tipo de dato o distribucion normal: \\n                                <select class=\\\"form-control mySelect\\\" [(ngModel)]=\\\"type\\\" [ngModelOptions]=\\\"{standalone: true}\\\" ><option *ngFor=\\\"let t of types\\\" >{{t}}</option></select>\\n                            </span>\\n                    <span>Filas: <input class=\\\"form-control mySelect\\\"type=\\\"number\\\" [(ngModel)]=\\\"rows\\\" [ngModelOptions]=\\\"{standalone: true}\\\"></span>\\n                    <span>Columnas: <input class=\\\"form-control mySelect\\\"type=\\\"number\\\" [(ngModel)]=\\\"cols\\\" [ngModelOptions]=\\\"{standalone: true}\\\"></span>\\n                    <hr>\\n                    <h6>Rango: (A, B)</h6>\\n                    <span>A: <input class=\\\"form-control mySelect\\\"type=\\\"number\\\" [(ngModel)]=\\\"a\\\" [ngModelOptions]=\\\"{standalone: true}\\\"></span>\\n                    <span>B: <input class=\\\"form-control mySelect\\\"type=\\\"number\\\" [(ngModel)]=\\\"b\\\" [ngModelOptions]=\\\"{standalone: true}\\\"></span>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n\\n                    <hr>\\n                    <h6>Para generar valores dentro de una distribucion normal tambien ingrese la media(µ) y la Desviacion estandar(σ)</h6>\\n                    <span>Media µ: <input class=\\\"form-control mySelect\\\"type=\\\"number\\\" [(ngModel)]=\\\"sigma\\\" [ngModelOptions]=\\\"{standalone: true}\\\"></span>\\n                    <span>Desviacion estandar σ: <input class=\\\"form-control mySelect\\\"type=\\\"number\\\" [(ngModel)]=\\\"mu\\\" [ngModelOptions]=\\\"{standalone: true}\\\"></span>\\n                    <span><input type=\\\"submit\\\" value=\\\"Descargar excel \\\" class=\\\"btn btn-outline-success miBtn\\\"></span>\\n                </div>\\n            </div>\\n        </form>\\n    </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport * as XLSX from 'xlsx';\nimport { OperacionesService } from '../../services/operaciones.service'\n@Component({\n  selector: 'app-export',\n  templateUrl: './export.component.html',\n  styles: [],\n  providers: [OperacionesService]\n})\nexport class ExportComponent implements OnInit {\n  public rows = 0; cols = 0;\n  public a = 0; b = 0;\n  public mu: number; sigma: number;\n  public types = ['Integer', 'float', 'normal', 'normal_Scipy', 'Multivariate_normal'];\n  public type;\n\n  constructor(private _operacionesService: OperacionesService) { }\n\n  ngOnInit() {\n  }\n  onExport(json, name) {\n    /* generate worksheet */\n    console.log(name);\n    const ws: XLSX.WorkSheet = XLSX.utils.aoa_to_sheet(json.data);\n\n    /* generate workbook and add the worksheet */\n    const wb: XLSX.WorkBook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws);\n\n    /* save to file */\n    XLSX.writeFile(wb, name);\n  }\n  onSubmit() {\n    const data = {m: this.rows, n: this.cols, a: this.a, b: this.b, type: this.type, mu: this.mu, sigma: this.sigma};\n    this._operacionesService.random(data).subscribe(\n      response => {\n        console.log(response);\n        const name = response.name + '.xlsx';\n        response = JSON.parse(response.data);\n        this.onExport(response, name);\n      }\n    );\n  }\n\n}\n","module.exports = \"<form>\\n    <div class=\\\"row\\\">\\n        <div *ngFor=\\\"let i of rows\\\" class=\\\"col-2\\\">\\n            <p *ngFor=\\\"let i of cols\\\">\\n                <input type=\\\"text\\\" (select)=\\\"onKey($event)\\\">\\n            </p>\\n            {{values}}\\n        </div>\\n\\n    </div>\\n    <div>\\n        <p> <input type=\\\"number\\\" (click)=\\\"changeCols()\\\" value=\\\"1\\\" min=\\\"1\\\" max=\\\"5\\\"> filas</p>\\n        <p><input type=\\\"number\\\" (click)=\\\"changeRows()\\\" value=\\\"2\\\" min=\\\"2\\\" max=\\\"5\\\"> columnas</p>\\n    </div>\\n</form>\\n<section>\\n    <label for=\\\"workStatus\\\">Work Status</label>\\n    <select name=\\\"workStatus\\\" [(ngModel)]=\\\"contact.workStatus\\\">\\n      <option *ngFor=\\\"let wkSt of workStatuses\\\" [value]=\\\"wkSt.id\\\">\\n        <span>{{ wkSt.description }}</span>\\n      </option>\\n    </select>\\n</section>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-input-visual',\n  templateUrl: './input-visual.component.html',\n  styles: [],\n})\nexport class InputVisualComponent implements OnInit {\n  public cols =  [1];\n  public rows =  [1, 1];\n  public data;\n  public values= '';\n  \n  public workStatuses = [\n    { id: 0, description: 'unknow' },\n    { id: 1, description: 'student' },\n    { id: 2, description: 'unemployed' },\n    { id: 3, description: 'employed' }\n  ];\n  public contact = { name: '', isVIP: false, gender: '', workStatus: 0 };\n  constructor() { }\n\n  ngOnInit() {}\n  onKey(event: any) { // without type info\n    this.values += event.target.value + ' ';\n  }\n  changeCols() {\n    this.cols.push(1);\n  }\n  changeRows() {\n    this.rows.push(1);\n  }\n}\n","module.exports = \"tr {\\n    text-align: center\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9yZXN1bHRhZG8vcmVzdWx0YWRvLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSTtBQUNKIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9yZXN1bHRhZG8vcmVzdWx0YWRvLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0ciB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyXG59Il19 */\"","module.exports = \"<div class=\\\"alert alert-success\\\" *ngIf=\\\"mensaje.includes('Error')==false\\\">\\n    {{mensaje}}\\n</div>\\n<div class=\\\"alert alert-danger\\\" *ngIf=\\\"mensaje.includes('Error')==true\\\">\\n    {{mensaje}}\\n</div>\\n<table class=\\\"table table-striped table-dark\\\">\\n    <tbody>\\n        <tr *ngFor=\\\"let i of matriz_resultado\\\">\\n            <td *ngFor=\\\"let j of i\\\">{{ j }}</td>\\n        </tr>\\n    </tbody>\\n</table>\"","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-resultado',\n  templateUrl: './resultado.component.html',\n  styleUrls: ['./resultado.component.css']\n})\nexport class ResultadoComponent implements OnInit {\n  @Input() public matriz_resultado;\n  @Input() public mensaje;\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdW5pbWF0cml6L3VuaW1hdHJpei5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <h2>Suba su archivo de excel y elija una operacion.</h2>\\n        <h6>\\n            Para encontrar la matriz inversa o su determinante por favor verifique que su matriz sea <b>cuadrada</b> .\\n        </h6>\\n    </div>\\n    <div class=\\\"row\\\">\\n\\n        <form (ngSubmit)=\\\"onSubmit()\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"card\\\">\\n                    <div class=\\\"card-body\\\">\\n                        <h5 class=\\\"card-title\\\">Suba su archivo .xlsx</h5>\\n                        <input class=\\\"btn-success \\\" type=\\\"file\\\" (change)=\\\"onFileChange($event)\\\" multiple=\\\"false\\\" />\\n                    </div>\\n                </div>\\n                <div>\\n                    <p> Por favor elija una operación:</p>\\n                    <input (click)=\\\"operacion('transpuesta')\\\" type=\\\"submit\\\" value=\\\"Transpuesta\\\" class=\\\"btn btn-outline-primary miBtn\\\">\\n                    <input (click)=\\\"operacion('diagonal')\\\" type=\\\"submit\\\" value=\\\"Diagonal\\\" class=\\\"btn btn-outline-success miBtn\\\">\\n                    <input (click)=\\\"operacion('inversa')\\\" type=\\\"submit\\\" value=\\\"Inversa\\\" class=\\\"btn btn-outline-warning miBtn\\\">\\n                    <input (click)=\\\"operacion('triangularI')\\\" type=\\\"submit\\\" value=\\\"Triangular Inferior\\\" class=\\\"btn btn-outline-info miBtn\\\">\\n                    <input (click)=\\\"operacion('triangularS')\\\" type=\\\"submit\\\" value=\\\"Triangular Superior\\\" class=\\\"btn btn-outline-info miBtn\\\">\\n                    <hr>\\n                    <input (click)=\\\"operacion('determinante')\\\" type=\\\"submit\\\" value=\\\"Determinante\\\" class=\\\"btn btn-primary miBtn\\\">\\n                    <input (click)=\\\"operacion('rango')\\\" type=\\\"submit\\\" value=\\\"Rango\\\" class=\\\"btn btn-success miBtn\\\">\\n                    <input (click)=\\\"operacion('norma')\\\" type=\\\"submit\\\" value=\\\"Norma\\\" class=\\\"btn btn-warning miBtn\\\">\\n                </div>\\n            </div>\\n        </form>\\n    </div>\\n    <app-resultado class=\\\"col-6\\\" [matriz_resultado]=\\\"resultado\\\" [mensaje]=\\\"mensaje\\\"></app-resultado>\"","import { Component, OnInit } from '@angular/core';\nimport * as XLSX from 'xlsx';\nimport { OperacionesService } from '../../services/operaciones.service'\n\n\n@Component({\n  selector: 'app-unimatriz',\n  templateUrl: './unimatriz.component.html',\n  styleUrls: ['./unimatriz.component.css'],\n  providers: [OperacionesService]\n})\nexport class UnimatrizComponent implements OnInit {\n  public data: any = {matrix: [], operacion: ''} ;\n  public resultado;\n  public status: string;\n  public mensaje = '';\n\n  constructor(private _operacionesService: OperacionesService) { }\n\n  ngOnInit() {\n  }\n  onSubmit() {\n    this._operacionesService.unimatriz(this.data).subscribe(\n      response => {\n        this.mensaje = response.mensaje;\n        response = JSON.parse(response.resultado);\n        this.resultado = response.data;\n        console.log(response)\n      }\n    );\n  }\n  onFileChange(evt: any) {\n    /* wire up file reader */\n    const target: DataTransfer = (evt.target) as DataTransfer;\n    if (target.files.length !== 1) { throw new Error('Cannot use multiple files'); }\n    const reader: FileReader = new FileReader();\n    reader.onload = (e: any) => {\n      /* read workbook */\n      const bstr: string = e.target.result;\n      const wb: XLSX.WorkBook = XLSX.read(bstr, {type: 'binary'});\n      /* grab first sheet */\n      const wsname: string = wb.SheetNames[0];\n      const ws: XLSX.WorkSheet = wb.Sheets[wsname];\n      /* save data */\n      const excelVector = XLSX.utils.sheet_to_json(ws, {header: 1});\n      this.data.matrix.push(excelVector);\n      /* empaquetamos el vector para enviarlo al backend */\n    };\n    reader.readAsBinaryString(target.files[0]);\n  }\n  operacion(value) {\n    this.data.operacion = value;\n  }\n\n}\n","/* export let GLOBAL = {\n    url: 'https://agile-crag-29584.herokuapp.com/'\n};  */\n\n  export let GLOBAL = {\n    url: 'http://localhost:5000/'\n};\n ","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { GLOBAL } from './global';\n\n@Injectable()\nexport class OperacionesService {\n  public url: string;\n\n  constructor(public _http: HttpClient) {\n    this.url = GLOBAL.url;\n   }\n   operaciones(data: any): Observable<any> {\n    const params = JSON.stringify(data);\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'operacion', params, {headers});\n   }\n   unimatriz(data: any): Observable<any> {\n    const params = JSON.stringify(data);\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'unimatriz', params, {headers});\n   }\n   random(data: any): Observable<any> {\n    const params = JSON.stringify(data);\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'random', params, {headers});\n   }\n}\n\n\n/* se puede hacer que la direccion de la peticion al servicio sea solo uno mandando desde el componente\nuna conf para que este solo sea un metodo toDo() */","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"sourceRoot":""}